"use strict";
// This is an exact copy of the file `packages/aws-cdk/lib/logging.ts` from 2024-11-29
// https://github.com/aws/aws-cdk/blob/81cde0e2e1f83f80273d14724d5518cc20dc5a80/packages/aws-cdk/lib/logging.ts
// After this we started refactoring the file and functionality changed significantly.
// In order to preserver backwards-compatibly for users with unsanctioned usage of this file,
// we keep a copy of the original version around.
// See https://github.com/aws/aws-cdk/pull/33021 for more information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = exports.print = exports.highlight = exports.success = exports.warning = exports.error = exports.debug = exports.trace = exports.CI = exports.logLevel = exports.LogLevel = void 0;
exports.withCorkedLogging = withCorkedLogging;
exports.setLogLevel = setLogLevel;
exports.setCI = setCI;
exports.increaseVerbosity = increaseVerbosity;
exports.prefix = prefix;
const util = require("util");
const chalk = require("chalk");
const { stdout, stderr } = process;
/**
 * @deprecated
 */
async function withCorkedLogging(block) {
    corkLogging();
    try {
        return await block();
    }
    finally {
        uncorkLogging();
    }
}
let CORK_COUNTER = 0;
const logBuffer = [];
function corked() {
    return CORK_COUNTER !== 0;
}
function corkLogging() {
    CORK_COUNTER += 1;
}
function uncorkLogging() {
    CORK_COUNTER -= 1;
    if (!corked()) {
        logBuffer.forEach(([stream, str]) => stream.write(str + '\n'));
        logBuffer.splice(0);
    }
}
const logger = (stream, styles, timestamp) => (fmt, ...args) => {
    const ts = timestamp ? `[${formatTime(new Date())}] ` : '';
    let str = ts + util.format(fmt, ...args);
    if (styles && styles.length) {
        str = styles.reduce((a, style) => style(a), str);
    }
    const realStream = typeof stream === 'function' ? stream() : stream;
    // Logger is currently corked, so we store the message to be printed
    // later when we are uncorked.
    if (corked()) {
        logBuffer.push([realStream, str]);
        return;
    }
    realStream.write(str + '\n');
};
function formatTime(d) {
    return `${lpad(d.getHours(), 2)}:${lpad(d.getMinutes(), 2)}:${lpad(d.getSeconds(), 2)}`;
    function lpad(x, w) {
        const s = `${x}`;
        return '0'.repeat(Math.max(w - s.length, 0)) + s;
    }
}
/**
 * @deprecated
 */
var LogLevel;
(function (LogLevel) {
    /** Not verbose at all */
    LogLevel[LogLevel["DEFAULT"] = 0] = "DEFAULT";
    /** Pretty verbose */
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    /** Extremely verbose */
    LogLevel[LogLevel["TRACE"] = 2] = "TRACE";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * @deprecated
 */
exports.logLevel = LogLevel.DEFAULT;
/**
 * @deprecated
 */
exports.CI = false;
/**
 * @deprecated
 */
function setLogLevel(newLogLevel) {
    exports.logLevel = newLogLevel;
}
/**
 * @deprecated
 */
function setCI(newCI) {
    exports.CI = newCI;
}
/**
 * @deprecated
 */
function increaseVerbosity() {
    exports.logLevel += 1;
}
const stream = () => exports.CI ? stdout : stderr;
const _debug = logger(stream, [chalk.gray], true);
/**
 * @deprecated
 */
const trace = (fmt, ...args) => exports.logLevel >= LogLevel.TRACE && _debug(fmt, ...args);
exports.trace = trace;
/**
 * @deprecated
 */
const debug = (fmt, ...args) => exports.logLevel >= LogLevel.DEBUG && _debug(fmt, ...args);
exports.debug = debug;
/**
 * @deprecated
 */
exports.error = logger(stderr, [chalk.red]);
/**
 * @deprecated
 */
exports.warning = logger(stream, [chalk.yellow]);
/**
 * @deprecated
 */
exports.success = logger(stream, [chalk.green]);
/**
 * @deprecated
 */
exports.highlight = logger(stream, [chalk.bold]);
/**
 * @deprecated
 */
exports.print = logger(stream);
/**
 * @deprecated
 */
exports.data = logger(stdout);
/**
 * Create a logger output that features a constant prefix string.
 *
 * @deprecated
 *
 * @param prefixString - the prefix string to be appended before any log entry.
 * @param fn   - the logger function to be used (typically one of the other functions in this module)
 *
 * @returns a new LoggerFunction.
 */
function prefix(prefixString, fn) {
    return (fmt, ...args) => fn(`%s ${fmt}`, prefixString, ...args);
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
// This is the legacy symbols export file.
// We export a number of known symbols that are imported by users from the `aws-cdk` package.
// Importing these symbols was never officially supported, but here we are.
// See https://github.com/aws/aws-cdk/pull/33021 for more information.
//
// In package.json, section `exports`, we declare all known subpaths as an explicit subpath export resolving to this file.
// This way existing unsanctioned imports don't break immediately.
//
// When attempting to import a subpath other than the explicitly exported ones, the following runtime error will be thrown:
// Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath './lib/private/subpath' is not defined by "exports" in aws-cdk/package.json
//
// TypeScript can warn users about the not-exported subpath at compile time. However it requires a reasonably modern tsconfig.json.
// Specifically `moduleResolution` must be set to either "node16" or "nodenext".
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = exports.print = exports.highlight = exports.success = exports.warning = exports.error = exports.debug = exports.trace = exports.increaseVerbosity = exports.setCI = exports.setLogLevel = exports.CI = exports.logLevel = exports.LogLevel = exports.withCorkedLogging = exports.CfnEvaluationException = exports.cached = exports.availableInitTemplates = exports.versionNumber = exports.rootDir = exports.Deployments = exports.deepMerge = exports.lowerCaseFirstCharacter = exports.describe = exports.command = exports.aliases = exports.enableTracing = exports.formatAsBanner = exports.leftPad = exports.RequireApproval = exports.execProgram = exports.CloudExecutable = exports.Bootstrapper = exports.Settings = exports.PROJECT_CONTEXT = exports.Configuration = exports.Command = exports.contentHash = exports.PluginHost = exports.SdkProvider = exports.exec = exports.cli = exports.deployStack = exports.partition = exports.numberFromBool = exports.isEmpty = exports.isArray = exports.ifDefined = exports.flatten = exports.deepClone = void 0;
exports.prefix = void 0;
// We need to import the legacy exports via index.ts
// This is because we will bundle all code and dependencies into index.js at build time.
// It's the only place where the code exists as a working, self-contained copy.
// While we could have bundled `legacy-exports.ts` separately, it would create an other copy of the pretty much identical bundle
// and add an additional 16mb+ to the published package.
// To avoid this, we deduplicated the bundled code and run everything through index.ts.
const index_1 = require("./index");
// Re-export all symbols via index.js
// We do this, because index.js is the file that will end up with all dependencies bundled
/**
 * @deprecated
 */
exports.deepClone = index_1.legacy.deepClone, exports.flatten = index_1.legacy.flatten, exports.ifDefined = index_1.legacy.ifDefined, exports.isArray = index_1.legacy.isArray, exports.isEmpty = index_1.legacy.isEmpty, exports.numberFromBool = index_1.legacy.numberFromBool, exports.partition = index_1.legacy.partition, exports.deployStack = index_1.legacy.deployStack, exports.cli = index_1.legacy.cli, exports.exec = index_1.legacy.exec, exports.SdkProvider = index_1.legacy.SdkProvider, exports.PluginHost = index_1.legacy.PluginHost, exports.contentHash = index_1.legacy.contentHash, exports.Command = index_1.legacy.Command, exports.Configuration = index_1.legacy.Configuration, exports.PROJECT_CONTEXT = index_1.legacy.PROJECT_CONTEXT, exports.Settings = index_1.legacy.Settings, exports.Bootstrapper = index_1.legacy.Bootstrapper, exports.CloudExecutable = index_1.legacy.CloudExecutable, exports.execProgram = index_1.legacy.execProgram, exports.RequireApproval = index_1.legacy.RequireApproval, exports.leftPad = index_1.legacy.leftPad, exports.formatAsBanner = index_1.legacy.formatAsBanner, exports.enableTracing = index_1.legacy.enableTracing, exports.aliases = index_1.legacy.aliases, exports.command = index_1.legacy.command, exports.describe = index_1.legacy.describe, exports.lowerCaseFirstCharacter = index_1.legacy.lowerCaseFirstCharacter, exports.deepMerge = index_1.legacy.deepMerge, exports.Deployments = index_1.legacy.Deployments, exports.rootDir = index_1.legacy.rootDir, exports.versionNumber = index_1.legacy.versionNumber, exports.availableInitTemplates = index_1.legacy.availableInitTemplates, exports.cached = index_1.legacy.cached, exports.CfnEvaluationException = index_1.legacy.CfnEvaluationException, exports.withCorkedLogging = index_1.legacy.withCorkedLogging, exports.LogLevel = index_1.legacy.LogLevel, exports.logLevel = index_1.legacy.logLevel, exports.CI = index_1.legacy.CI, exports.setLogLevel = index_1.legacy.setLogLevel, exports.setCI = index_1.legacy.setCI, exports.increaseVerbosity = index_1.legacy.increaseVerbosity, exports.trace = index_1.legacy.trace, exports.debug = index_1.legacy.debug, exports.error = index_1.legacy.error, exports.warning = index_1.legacy.warning, exports.success = index_1.legacy.success, exports.highlight = index_1.legacy.highlight, exports.print = index_1.legacy.print, exports.data = index_1.legacy.data, exports.prefix = index_1.legacy.prefix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWV4cG9ydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsZWdhY3ktZXhwb3J0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQTBDO0FBQzFDLDZGQUE2RjtBQUM3RiwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLEVBQUU7QUFDRiwwSEFBMEg7QUFDMUgsa0VBQWtFO0FBQ2xFLEVBQUU7QUFDRiwySEFBMkg7QUFDM0gscUlBQXFJO0FBQ3JJLEVBQUU7QUFDRixtSUFBbUk7QUFDbkksZ0ZBQWdGOzs7O0FBRWhGLG9EQUFvRDtBQUNwRCx3RkFBd0Y7QUFDeEYsK0VBQStFO0FBQy9FLGdJQUFnSTtBQUNoSSx3REFBd0Q7QUFDeEQsdUZBQXVGO0FBQ3ZGLG1DQUFpQztBQVVqQyxxQ0FBcUM7QUFDckMsMEZBQTBGO0FBQzFGOztHQUVHO0FBRUQsaUJBQVMsR0FtRFAsY0FBTSxZQWxEUixlQUFPLEdBa0RMLGNBQU0sVUFqRFIsaUJBQVMsR0FpRFAsY0FBTSxZQWhEUixlQUFPLEdBZ0RMLGNBQU0sVUEvQ1IsZUFBTyxHQStDTCxjQUFNLFVBOUNSLHNCQUFjLEdBOENaLGNBQU0saUJBN0NSLGlCQUFTLEdBNkNQLGNBQU0sWUE1Q1IsbUJBQVcsR0E0Q1QsY0FBTSxjQTNDUixXQUFHLEdBMkNELGNBQU0sTUExQ1IsWUFBSSxHQTBDRixjQUFNLE9BekNSLG1CQUFXLEdBeUNULGNBQU0sY0F4Q1Isa0JBQVUsR0F3Q1IsY0FBTSxhQXZDUixtQkFBVyxHQXVDVCxjQUFNLGNBdENSLGVBQU8sR0FzQ0wsY0FBTSxVQXJDUixxQkFBYSxHQXFDWCxjQUFNLGdCQXBDUix1QkFBZSxHQW9DYixjQUFNLGtCQW5DUixnQkFBUSxHQW1DTixjQUFNLFdBbENSLG9CQUFZLEdBa0NWLGNBQU0sZUFqQ1IsdUJBQWUsR0FpQ2IsY0FBTSxrQkFoQ1IsbUJBQVcsR0FnQ1QsY0FBTSxjQS9CUix1QkFBZSxHQStCYixjQUFNLGtCQTlCUixlQUFPLEdBOEJMLGNBQU0sVUE3QlIsc0JBQWMsR0E2QlosY0FBTSxpQkE1QlIscUJBQWEsR0E0QlgsY0FBTSxnQkEzQlIsZUFBTyxHQTJCTCxjQUFNLFVBMUJSLGVBQU8sR0EwQkwsY0FBTSxVQXpCUixnQkFBUSxHQXlCTixjQUFNLFdBeEJSLCtCQUF1QixHQXdCckIsY0FBTSwwQkF2QlIsaUJBQVMsR0F1QlAsY0FBTSxZQXRCUixtQkFBVyxHQXNCVCxjQUFNLGNBckJSLGVBQU8sR0FxQkwsY0FBTSxVQXBCUixxQkFBYSxHQW9CWCxjQUFNLGdCQW5CUiw4QkFBc0IsR0FtQnBCLGNBQU0seUJBbEJSLGNBQU0sR0FrQkosY0FBTSxTQWpCUiw4QkFBc0IsR0FpQnBCLGNBQU0seUJBaEJSLHlCQUFpQixHQWdCZixjQUFNLG9CQWZSLGdCQUFRLEdBZU4sY0FBTSxXQWRSLGdCQUFRLEdBY04sY0FBTSxXQWJSLFVBQUUsR0FhQSxjQUFNLEtBWlIsbUJBQVcsR0FZVCxjQUFNLGNBWFIsYUFBSyxHQVdILGNBQU0sUUFWUix5QkFBaUIsR0FVZixjQUFNLG9CQVRSLGFBQUssR0FTSCxjQUFNLFFBUlIsYUFBSyxHQVFILGNBQU0sUUFQUixhQUFLLEdBT0gsY0FBTSxRQU5SLGVBQU8sR0FNTCxjQUFNLFVBTFIsZUFBTyxHQUtMLGNBQU0sVUFKUixpQkFBUyxHQUlQLGNBQU0sWUFIUixhQUFLLEdBR0gsY0FBTSxRQUZSLFlBQUksR0FFRixjQUFNLE9BRFIsY0FBTSxHQUNKLGNBQU0sUUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgdGhlIGxlZ2FjeSBzeW1ib2xzIGV4cG9ydCBmaWxlLlxuLy8gV2UgZXhwb3J0IGEgbnVtYmVyIG9mIGtub3duIHN5bWJvbHMgdGhhdCBhcmUgaW1wb3J0ZWQgYnkgdXNlcnMgZnJvbSB0aGUgYGF3cy1jZGtgIHBhY2thZ2UuXG4vLyBJbXBvcnRpbmcgdGhlc2Ugc3ltYm9scyB3YXMgbmV2ZXIgb2ZmaWNpYWxseSBzdXBwb3J0ZWQsIGJ1dCBoZXJlIHdlIGFyZS5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1jZGsvcHVsbC8zMzAyMSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbi8vXG4vLyBJbiBwYWNrYWdlLmpzb24sIHNlY3Rpb24gYGV4cG9ydHNgLCB3ZSBkZWNsYXJlIGFsbCBrbm93biBzdWJwYXRocyBhcyBhbiBleHBsaWNpdCBzdWJwYXRoIGV4cG9ydCByZXNvbHZpbmcgdG8gdGhpcyBmaWxlLlxuLy8gVGhpcyB3YXkgZXhpc3RpbmcgdW5zYW5jdGlvbmVkIGltcG9ydHMgZG9uJ3QgYnJlYWsgaW1tZWRpYXRlbHkuXG4vL1xuLy8gV2hlbiBhdHRlbXB0aW5nIHRvIGltcG9ydCBhIHN1YnBhdGggb3RoZXIgdGhhbiB0aGUgZXhwbGljaXRseSBleHBvcnRlZCBvbmVzLCB0aGUgZm9sbG93aW5nIHJ1bnRpbWUgZXJyb3Igd2lsbCBiZSB0aHJvd246XG4vLyBFcnJvciBbRVJSX1BBQ0tBR0VfUEFUSF9OT1RfRVhQT1JURURdOiBQYWNrYWdlIHN1YnBhdGggJy4vbGliL3ByaXZhdGUvc3VicGF0aCcgaXMgbm90IGRlZmluZWQgYnkgXCJleHBvcnRzXCIgaW4gYXdzLWNkay9wYWNrYWdlLmpzb25cbi8vXG4vLyBUeXBlU2NyaXB0IGNhbiB3YXJuIHVzZXJzIGFib3V0IHRoZSBub3QtZXhwb3J0ZWQgc3VicGF0aCBhdCBjb21waWxlIHRpbWUuIEhvd2V2ZXIgaXQgcmVxdWlyZXMgYSByZWFzb25hYmx5IG1vZGVybiB0c2NvbmZpZy5qc29uLlxuLy8gU3BlY2lmaWNhbGx5IGBtb2R1bGVSZXNvbHV0aW9uYCBtdXN0IGJlIHNldCB0byBlaXRoZXIgXCJub2RlMTZcIiBvciBcIm5vZGVuZXh0XCIuXG5cbi8vIFdlIG5lZWQgdG8gaW1wb3J0IHRoZSBsZWdhY3kgZXhwb3J0cyB2aWEgaW5kZXgudHNcbi8vIFRoaXMgaXMgYmVjYXVzZSB3ZSB3aWxsIGJ1bmRsZSBhbGwgY29kZSBhbmQgZGVwZW5kZW5jaWVzIGludG8gaW5kZXguanMgYXQgYnVpbGQgdGltZS5cbi8vIEl0J3MgdGhlIG9ubHkgcGxhY2Ugd2hlcmUgdGhlIGNvZGUgZXhpc3RzIGFzIGEgd29ya2luZywgc2VsZi1jb250YWluZWQgY29weS5cbi8vIFdoaWxlIHdlIGNvdWxkIGhhdmUgYnVuZGxlZCBgbGVnYWN5LWV4cG9ydHMudHNgIHNlcGFyYXRlbHksIGl0IHdvdWxkIGNyZWF0ZSBhbiBvdGhlciBjb3B5IG9mIHRoZSBwcmV0dHkgbXVjaCBpZGVudGljYWwgYnVuZGxlXG4vLyBhbmQgYWRkIGFuIGFkZGl0aW9uYWwgMTZtYisgdG8gdGhlIHB1Ymxpc2hlZCBwYWNrYWdlLlxuLy8gVG8gYXZvaWQgdGhpcywgd2UgZGVkdXBsaWNhdGVkIHRoZSBidW5kbGVkIGNvZGUgYW5kIHJ1biBldmVyeXRoaW5nIHRocm91Z2ggaW5kZXgudHMuXG5pbXBvcnQgeyBsZWdhY3kgfSBmcm9tICcuL2luZGV4JztcblxuLy8gV2UgYWxzbyBuZWVkIHRvIHJlLWV4cG9ydCBzb21lIHR5cGVzXG4vLyBUaGVzZSBkb24ndCBuZWVkIHRvIHBhcnRpY2lwYXRlIGluIHRoZSBidW5kbGluZywgc28gd2UgY2FuIGp1c3QgcHV0IHRoZW0gaGVyZVxuZXhwb3J0IHR5cGUgeyBCb290c3RyYXBFbnZpcm9ubWVudE9wdGlvbnMsIEJvb3RzdHJhcFNvdXJjZSB9IGZyb20gJy4vYXBpL2Jvb3RzdHJhcCc7XG5leHBvcnQgdHlwZSB7IERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi9hcGkvZGVwbG95bWVudHMnO1xuXG4vLyBMZWdhY3kgdHlwZSBjb3BpZXNcbmV4cG9ydCB0eXBlICogZnJvbSAnLi9sZWdhY3knO1xuXG4vLyBSZS1leHBvcnQgYWxsIHN5bWJvbHMgdmlhIGluZGV4LmpzXG4vLyBXZSBkbyB0aGlzLCBiZWNhdXNlIGluZGV4LmpzIGlzIHRoZSBmaWxlIHRoYXQgd2lsbCBlbmQgdXAgd2l0aCBhbGwgZGVwZW5kZW5jaWVzIGJ1bmRsZWRcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHtcbiAgZGVlcENsb25lLFxuICBmbGF0dGVuLFxuICBpZkRlZmluZWQsXG4gIGlzQXJyYXksXG4gIGlzRW1wdHksXG4gIG51bWJlckZyb21Cb29sLFxuICBwYXJ0aXRpb24sXG4gIGRlcGxveVN0YWNrLFxuICBjbGksXG4gIGV4ZWMsXG4gIFNka1Byb3ZpZGVyLFxuICBQbHVnaW5Ib3N0LFxuICBjb250ZW50SGFzaCxcbiAgQ29tbWFuZCxcbiAgQ29uZmlndXJhdGlvbixcbiAgUFJPSkVDVF9DT05URVhULFxuICBTZXR0aW5ncyxcbiAgQm9vdHN0cmFwcGVyLFxuICBDbG91ZEV4ZWN1dGFibGUsXG4gIGV4ZWNQcm9ncmFtLFxuICBSZXF1aXJlQXBwcm92YWwsXG4gIGxlZnRQYWQsXG4gIGZvcm1hdEFzQmFubmVyLFxuICBlbmFibGVUcmFjaW5nLFxuICBhbGlhc2VzLFxuICBjb21tYW5kLFxuICBkZXNjcmliZSxcbiAgbG93ZXJDYXNlRmlyc3RDaGFyYWN0ZXIsXG4gIGRlZXBNZXJnZSxcbiAgRGVwbG95bWVudHMsXG4gIHJvb3REaXIsXG4gIHZlcnNpb25OdW1iZXIsXG4gIGF2YWlsYWJsZUluaXRUZW1wbGF0ZXMsXG4gIGNhY2hlZCxcbiAgQ2ZuRXZhbHVhdGlvbkV4Y2VwdGlvbixcbiAgd2l0aENvcmtlZExvZ2dpbmcsXG4gIExvZ0xldmVsLFxuICBsb2dMZXZlbCxcbiAgQ0ksXG4gIHNldExvZ0xldmVsLFxuICBzZXRDSSxcbiAgaW5jcmVhc2VWZXJib3NpdHksXG4gIHRyYWNlLFxuICBkZWJ1ZyxcbiAgZXJyb3IsXG4gIHdhcm5pbmcsXG4gIHN1Y2Nlc3MsXG4gIGhpZ2hsaWdodCxcbiAgcHJpbnQsXG4gIGRhdGEsXG4gIHByZWZpeCxcbn0gPSBsZWdhY3k7XG4iXX0=
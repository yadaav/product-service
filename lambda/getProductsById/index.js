"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, GetCommand } = require('@aws-sdk/lib-dynamodb');
const client = new DynamoDBClient({});
const ddb = DynamoDBDocumentClient.from(client);
const PRODUCTS_TABLE = process.env.PRODUCTS_TABLE_NAME;
const STOCK_TABLE = process.env.STOCK_TABLE_NAME;
exports.handler = async (event) => {
    const id = event.pathParameters && event.pathParameters.productId;
    if (!id)
        return { statusCode: 400, body: JSON.stringify({ message: 'Missing productId' }) };
    const productRes = await ddb.send(new GetCommand({ TableName: PRODUCTS_TABLE, Key: { id } }));
    if (!productRes.Item)
        return { statusCode: 404, body: JSON.stringify({ message: 'Product not found' }) };
    const stockRes = await ddb.send(new GetCommand({ TableName: STOCK_TABLE, Key: { product_id: id } }));
    const count = stockRes.Item ? stockRes.Item.count : 0;
    const joined = { ...productRes.Item, count };
    return { statusCode: 200, headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }, body: JSON.stringify(joined) };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUMvRCxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFaEYsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsTUFBTSxHQUFHLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRWhELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDdkQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztBQUlqRCxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFFLEVBQUU7SUFDdEQsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLGNBQWMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztJQUNsRSxJQUFJLENBQUMsRUFBRTtRQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDO0lBRTVGLE1BQU0sVUFBVSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJO1FBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFFekcsTUFBTSxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckcsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUMsa0JBQWtCLEVBQUMsNkJBQTZCLEVBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztBQUM3SSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IER5bmFtb0RCQ2xpZW50IH0gPSByZXF1aXJlKCdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInKTtcbmNvbnN0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgR2V0Q29tbWFuZCB9ID0gcmVxdWlyZSgnQGF3cy1zZGsvbGliLWR5bmFtb2RiJyk7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7fSk7XG5jb25zdCBkZGIgPSBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LmZyb20oY2xpZW50KTtcblxuY29uc3QgUFJPRFVDVFNfVEFCTEUgPSBwcm9jZXNzLmVudi5QUk9EVUNUU19UQUJMRV9OQU1FO1xuY29uc3QgU1RPQ0tfVEFCTEUgPSBwcm9jZXNzLmVudi5TVE9DS19UQUJMRV9OQU1FO1xuXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KSA9PiB7XG4gIGNvbnN0IGlkID0gZXZlbnQucGF0aFBhcmFtZXRlcnMgJiYgZXZlbnQucGF0aFBhcmFtZXRlcnMucHJvZHVjdElkO1xuICBpZiAoIWlkKSByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ01pc3NpbmcgcHJvZHVjdElkJyB9KSB9O1xuXG4gIGNvbnN0IHByb2R1Y3RSZXMgPSBhd2FpdCBkZGIuc2VuZChuZXcgR2V0Q29tbWFuZCh7IFRhYmxlTmFtZTogUFJPRFVDVFNfVEFCTEUsIEtleTogeyBpZCB9IH0pKTtcbiAgaWYgKCFwcm9kdWN0UmVzLkl0ZW0pIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwNCwgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiAnUHJvZHVjdCBub3QgZm91bmQnIH0pIH07XG5cbiAgY29uc3Qgc3RvY2tSZXMgPSBhd2FpdCBkZGIuc2VuZChuZXcgR2V0Q29tbWFuZCh7IFRhYmxlTmFtZTogU1RPQ0tfVEFCTEUsIEtleTogeyBwcm9kdWN0X2lkOiBpZCB9IH0pKTtcbiAgY29uc3QgY291bnQgPSBzdG9ja1Jlcy5JdGVtID8gc3RvY2tSZXMuSXRlbS5jb3VudCA6IDA7XG4gIGNvbnN0IGpvaW5lZCA9IHsgLi4ucHJvZHVjdFJlcy5JdGVtLCBjb3VudCB9O1xuICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOicqJyB9LCBib2R5OiBKU09OLnN0cmluZ2lmeShqb2luZWQpIH07XG59O1xuIl19
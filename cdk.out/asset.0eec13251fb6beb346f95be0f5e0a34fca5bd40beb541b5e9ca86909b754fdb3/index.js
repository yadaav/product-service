"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const productsPath = path_1.default.join(__dirname, 'products.json');
let products = [];
try {
    const raw = fs_1.default.readFileSync(productsPath, 'utf8');
    products = JSON.parse(raw);
    console.log('Loaded products count:', products.length);
}
catch (err) {
    console.error('Failed to load products.json', err);
    products = [];
}
const handler = async (event) => {
    console.log('EVENT', JSON.stringify(event));
    const productId = event.pathParameters?.productId ?? null;
    console.log('productId resolved:', productId);
    if (!productId) {
        return {
            statusCode: 400,
            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
            body: JSON.stringify({ message: 'Missing productId in path' })
        };
    }
    const normalizedId = String(productId).trim().toLowerCase();
    const product = products.find(p => [p.id, p.productId, p.sku, p.slug]
        .filter(Boolean)
        .some(v => String(v).trim().toLowerCase() === normalizedId));
    if (!product) {
        return {
            statusCode: 404,
            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
            body: JSON.stringify({ message: 'Product not found' })
        };
    }
    return {
        statusCode: 200,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
        body: JSON.stringify(product)
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLE1BQU0sWUFBWSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBVzNELElBQUksUUFBUSxHQUFjLEVBQUUsQ0FBQztBQUM3QixJQUFJLENBQUM7SUFDSCxNQUFNLEdBQUcsR0FBRyxZQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQWMsQ0FBQztJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBT00sTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQXNCLEVBQUUsRUFBRTtJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxTQUFTLElBQUksSUFBSSxDQUFDO0lBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFOUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2YsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtZQUNuRixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxDQUFDO1NBQy9ELENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDaEMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFHLENBQVMsQ0FBQyxTQUFTLEVBQUcsQ0FBUyxDQUFDLEdBQUcsRUFBRyxDQUFTLENBQUMsSUFBSSxDQUFDO1NBQzFELE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEtBQUssWUFBWSxDQUFDLENBQzlELENBQUM7SUFFRixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1lBQ25GLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUM7U0FDdkQsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQ25GLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztLQUM5QixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBakNXLFFBQUEsT0FBTyxXQWlDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IHByb2R1Y3RzUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdwcm9kdWN0cy5qc29uJyk7XG5cbmV4cG9ydCB0eXBlIFByb2R1Y3QgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHByaWNlOiBudW1iZXI7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIGltYWdlOiBzdHJpbmc7XG4gIGNhdGVnb3J5OiBzdHJpbmc7XG59O1xuXG5sZXQgcHJvZHVjdHM6IFByb2R1Y3RbXSA9IFtdO1xudHJ5IHtcbiAgY29uc3QgcmF3ID0gZnMucmVhZEZpbGVTeW5jKHByb2R1Y3RzUGF0aCwgJ3V0ZjgnKTtcbiAgcHJvZHVjdHMgPSBKU09OLnBhcnNlKHJhdykgYXMgUHJvZHVjdFtdO1xuICBjb25zb2xlLmxvZygnTG9hZGVkIHByb2R1Y3RzIGNvdW50OicsIHByb2R1Y3RzLmxlbmd0aCk7XG59IGNhdGNoIChlcnIpIHtcbiAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgcHJvZHVjdHMuanNvbicsIGVycik7XG4gIHByb2R1Y3RzID0gW107XG59XG5cbmludGVyZmFjZSBBUElHYXRld2F5RXZlbnQge1xuICBwYXRoUGFyYW1ldGVycz86IHsgcHJvZHVjdElkPzogc3RyaW5nIH07XG4gIC8vIGluY2x1ZGUgb3RoZXIgZmllbGRzIGlmIHlvdSB3YW50IHRvIHRlc3QgbG9jYWxseVxufVxuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheUV2ZW50KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdFVkVOVCcsIEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gIGNvbnN0IHByb2R1Y3RJZCA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzPy5wcm9kdWN0SWQgPz8gbnVsbDtcbiAgY29uc29sZS5sb2coJ3Byb2R1Y3RJZCByZXNvbHZlZDonLCBwcm9kdWN0SWQpO1xuXG4gIGlmICghcHJvZHVjdElkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiAnTWlzc2luZyBwcm9kdWN0SWQgaW4gcGF0aCcgfSlcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgbm9ybWFsaXplZElkID0gU3RyaW5nKHByb2R1Y3RJZCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHByb2R1Y3QgPSBwcm9kdWN0cy5maW5kKHAgPT5cbiAgICBbcC5pZCwgKHAgYXMgYW55KS5wcm9kdWN0SWQsIChwIGFzIGFueSkuc2t1LCAocCBhcyBhbnkpLnNsdWddXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAuc29tZSh2ID0+IFN0cmluZyh2KS50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gbm9ybWFsaXplZElkKVxuICApO1xuXG4gIGlmICghcHJvZHVjdCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiA0MDQsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogJ1Byb2R1Y3Qgbm90IGZvdW5kJyB9KVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwcm9kdWN0KVxuICB9O1xufTtcbiJdfQ==